name: Terraform Deploy

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: AWS Cleanup (force delete old resources)
        run: |
          echo "Cleaning up old IAM roles and S3 buckets..."

          ROLE_NAME="order-system-lambda-role"
          BUCKET_NAME="order-system-logs"

          # IAM cleanup
          if aws iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1; then
            echo "Detaching policies from $ROLE_NAME..."
            aws iam list-attached-role-policies --role-name "$ROLE_NAME" \
              --query 'AttachedPolicies[].PolicyArn' --output text | while read -r policy; do
              [ -n "$policy" ] && aws iam detach-role-policy --role-name "$ROLE_NAME" --policy-arn "$policy"
            done

            echo "Deleting inline policies..."
            aws iam list-role-policies --role-name "$ROLE_NAME" --query 'PolicyNames[]' --output text | while read -r policy; do
              [ -n "$policy" ] && aws iam delete-role-policy --role-name "$ROLE_NAME" --policy-name "$policy"
            done

            echo "Deleting IAM role $ROLE_NAME..."
            aws iam delete-role --role-name "$ROLE_NAME"
          else
            echo "IAM role $ROLE_NAME does not exist."
          fi

          # S3 cleanup
          if aws s3api head-bucket --bucket "$BUCKET_NAME" >/dev/null 2>&1; then
            echo "Force deleting all objects in $BUCKET_NAME..."
            aws s3 rm s3://"$BUCKET_NAME" --recursive || true
            echo "Deleting bucket $BUCKET_NAME..."
            aws s3 rb s3://"$BUCKET_NAME" --force || true
          else
            echo "S3 bucket $BUCKET_NAME does not exist."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-north-1

      - name: Build Lambda packages
        run: |
          echo "Zipping Lambda functions..."
          mkdir -p lambda
          if [ -f lambda/add_order/main.py ]; then
            cd lambda/add_order
            zip -r ../add_order.zip ./*
            cd ../..
          else
            echo "lambda/add_order/main.py not found, skipping"
          fi
          if [ -f lambda/process_order/main.py ]; then
            cd lambda/process_order
            zip -r ../process_order.zip ./*
            cd ../..
          else
            echo "lambda/process_order/main.py not found, skipping"
          fi
          ls -l lambda/

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false
